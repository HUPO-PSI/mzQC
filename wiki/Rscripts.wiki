#collection of Rscripts

= Introduction =

Each script shall be delimited by #########..

= Details =
{{{
#options
require("geneplotter")  ## from BioConductor
require("RColorBrewer") ## from CRAN
options(digits=30)

path<-commandArgs(TRUE)[1]

######
###TIC
######
a<-read.csv(file=file,head=TRUE,sep="\t")
######################################
png(post)
res = barplot(t(a$TIC), xlab="RT (min)",ylab="Intensity")
time_seq = seq(min(a$RT),max(a$RT),1200)
time_seq = round(time_seq)/60
t<-which(time_seq %% 1==0 & duplicated(time_seq)==F)
tmp = seq(min(res),max(res),max(res)/(length(time_seq)))
axis(1,at=tmp[t],labels=time_seq[t])
######################################
dev.off()
#
#
#
#
#
##########################
###IDs on rt/mz map vs precursors
##########################
file_p<-read.table(commandArgs(TRUE)[1], header=TRUE, sep="", na.strings="NA", dec=".", strip.white=TRUE)
file_id<-read.table(commandArgs(TRUE)[2], header=TRUE, sep="", na.strings="NA", dec=".", strip.white=TRUE)
post<-commandArgs(TRUE)[3]

file_p$RT_.sec. = file_p$RT_.sec./60
file_id$RT = file_id$RT/60

spec<-cbind(file_p,col=rep(1,length(file_p$RT_.sec.)))
id<-cbind(file_id[,1:2],rep(2,length(file_id$RT)))
all<-rbind(as.matrix(spec),as.matrix(id))

png(post)
plot(all,col=all[,3], xlab="RT[sec]", ylab="mz", pch=4, cex=0.3)
legend("topleft",c("recorded spectra","identified spectra"),pch=19,col=c(1,2))
######################################
dev.off()
#
#
#
#
#
file<-commandArgs(TRUE)[1]
post<-commandArgs(TRUE)[2]
##########################
###Mass accuracy
##########################
a<-read.delim(file)
png(post)
if ('delta_ppm' %in% colnames(a)) {
	hist(a$delta_ppm,xlim=c(-10,10),breaks=seq(min(a$delta_ppm)-0.01, max(a$delta_ppm)+0.01, 0.01),xlab="ppm",main=paste("delta ppm"))
	abline(v=median(a$delta_ppm),col="red", lwd=2)
	mtext(paste("median(accuracy)=",round(median(a$delta_ppm),3)," ppm",sep=""))
} else {
	tmp<-(1-a$MZ/a$TheoreticalWeight)*1e6
	hist(tmp,xlim=c(-10,10),breaks=seq(min(tmp)-0.01, max(tmp)+0.01, 0.01),xlab="ppm",main=paste("delta ppm"))
	abline(v=median(tmp),col="red", lwd=2)
	mtext(paste("median(accuracy)=",round(median(tmp),3)," ppm",sep=""))
}
######################################
dev.off()
#
#
#
#
#
##########################
###Mass accuracy over time
##########################
file = dir(pattern=".csv")
d<-read.delim(dir(pattern="_id.csv"))
png(paste(path,"accuracyRT.png",sep=""))
d1<-d$RT/60
d2<-(as.numeric(d$MZ)-as.numeric(d$TheoreticalWeight))/as.numeric(d$MZ)*1e6
d<-cbind(d1,d2)
plot(d,xlab="RT in [min]",ylab="mass error in [ppm]",main=paste(strsplit(file,split="_id")[[1]][1],"_RT",sep=""),col="#88000011", pch=20,cex=1)
dev.off()

##########################
###Number of Oxidation_(M) over time
##########################
file = dir(pattern=".csv")
d<-read.delim(dir(pattern="_id.csv"))
png(paste(path,"accuracyRT.png",sep=""))
d1<-d$RT/60
d2<-d$Oxidation_(M)
d<-cbind(d1,d2)
plot(d,xlab="RT in [min]",ylab="mass error in [ppm]",main=paste(strsplit(file,split="_id")[[1]][1],"_RT",sep=""),col="#88000011", pch=20,cex=1)
dev.off()

##########################
###Fractional versus nominal mass
##########################
b<-read.delim("theoretical_masses.txt")
file=dir(pattern="feature")
a<-read.delim(file)
a<-a$MZ*a$Charge - a$Charge*1.007276467
a1<-floor(a);
a2<-a-floor(a);
a<-cbind(a1,a2);
png(paste(path,"fractionalMass.png",sep=""))
smoothScatter(b,nrpoints=0,ylab="fractional mass",xlab="nominal mass", main="Fractional mass vs. nominal mass",xlim=c(0,5000),pch=4,col="blue")
points(a,col="#88000011", pch=20,cex=1)
legend("topleft",c("theoretical","experimental"),col=c("darkblue","darkred"),pch=19,bty='n')
dev.off()

##########################
###Set id stats
##########################
file<-commandArgs(TRUE)[1]
post<-commandArgs(TRUE)[2]

a<-read.table(file=file, header=TRUE, sep="\t", na.strings="NA", dec=".", strip.white=TRUE)
######################################
png(post)
bxpo=list()
bxpo$names=a[,1]
a <- as.matrix(a[,-1])
a <- t(a[,c("min","Q1","Q2","Q3","max")])
bxpo$stats = a
bxp(bxpo)
######################################
dev.off()
#
#
#
#
#

}}}